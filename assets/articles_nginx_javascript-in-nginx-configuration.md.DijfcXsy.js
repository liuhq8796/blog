import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.nO8RIRzf.js";const l="/blog/assets/created-contexts-sec.C9cTEkEc.png",p="/blog/assets/njs-demo.CxI-VNZR.png",F=JSON.parse('{"title":"Nginx 配置中的 JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"articles/nginx/javascript-in-nginx-configuration.md","filePath":"articles/nginx/javascript-in-nginx-configuration.md","lastUpdated":1714361078000}'),t={name:"articles/nginx/javascript-in-nginx-configuration.md"},h=n('<h1 id="nginx-配置中的-javascript" tabindex="-1">Nginx 配置中的 JavaScript <a class="header-anchor" href="#nginx-配置中的-javascript" aria-label="Permalink to &quot;Nginx 配置中的 JavaScript&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>NJS 的目标是成为一个通用的 nginx 脚本框架，正如它的名字是 nginx 和 JavaScript 的混合词，NJS 结合了两者，成为了一个从头编写了 JavaScript 解释器的 nginx 模块。</p><ul><li>nginx 脚本化配置的历史</li><li>NJS 的设计目标</li><li>NJS 解释器</li><li>在 nginx 中使用 NJS</li></ul><p>介绍下本文大纲，第一部分将谈论 nginx 脚本化配置的历史；第二章是关于 NJS 的设计目标是什么，为什么选择了 JavaScript，又为什么自己实现了一套 JS 解释器；下一章简单介绍下 NJS 解释器，这段会比较简略，因为参考的资料专业名词比较多，我看的不是太懂，里面还会包括 NJS 目前可用的功能；最后再展示一下如何在 nginx 中使用 NJS 的示例。</p><p>好了，大纲已经介绍完了，那么我们从 nginx 脚本化配置的历史开始。</p><h2 id="nginx-脚本化配置的历史" tabindex="-1">NGINX 脚本化配置的历史 <a class="header-anchor" href="#nginx-脚本化配置的历史" aria-label="Permalink to &quot;NGINX 脚本化配置的历史&quot;">​</a></h2><p>想要了解 nginx 脚本化配置的历史，从 nginx 团队对理想中的原生脚本的想法入手显然很有用，所以让我们先来看看这些设想中的特性。</p><h3 id="理想中的脚本特性" tabindex="-1">理想中的脚本特性 <a class="header-anchor" href="#理想中的脚本特性" aria-label="Permalink to &quot;理想中的脚本特性&quot;">​</a></h3><ul><li>够快够轻量 <ul><li>否则可以使用更高级的替代方案，例如 Node.js</li></ul></li><li>与 nginx 的异步特性很好地集成</li><li>模块化 <ul><li>不需要它的人可以禁用它来压榨更多的性能</li></ul></li><li>流行的脚本语言 <ul><li>帮助人们更快的编写他们的脚本</li></ul></li></ul><p>第一点也是重要的一点就是要够轻量够快，人类乐于使用 nginx 就是因为它速度快并且十分轻量，如果脚本做不到这一点那就没有在 nginx 中使用它的意义了，完全可以使用其他独立的更高级的代替方案，例如 Node.js</p><p>第二点，理想的脚本语法应该能与 nginx 的异步特性很好地集成，由 nginx 而不是其他东西来负责早期进程的主要事件循环。</p><p>下一点是关于模块化，它必须能够被禁用，以便不需要它的人可以禁用它来压榨更多的性能</p><p>最后，它应该是一种流行的脚本语言，可以帮助人们更快地编写他们的脚本，而不用去学习一门新语言，毕竟平时人们都有其他事情要做</p><h3 id="关于-perl" tabindex="-1">关于 Perl <a class="header-anchor" href="#关于-perl" aria-label="Permalink to &quot;关于 Perl&quot;">​</a></h3><p>优势</p><ul><li>可以使用现有的 Perl 库</li><li>Perl 代码可以嵌入到 nginx 配置文件中</li></ul><p>劣势</p><ul><li>不支持非阻塞 IO</li><li>Perl 解释器会退出工作进程</li></ul><p>第一次尝试在 nginx 中实现原生脚本是在 2005 年，nginx 有了 perl 模块来支持你写一些复杂的逻辑，那么来了解一下 perl 与刚才提到的理想中的脚本语言有多少一致性</p><p>perl 模块第一大优势是可以使用现有的 Perl 库，这对于脚本来说是一个很大的优势。</p><p>第二点是 Perl 代码可以直接嵌入到 nginx 的配置文件中，这极大地提高了使用脚本的便利性。</p><p>再来看看使用 perl 的负面因素</p><p>首先是它不支持非阻塞 IO，这是因为 perl 的解释器不知道它是在 nginx 中工作的，所以它会阻塞操作，显然这点对 nginx 来说是不可接受的，这是使用 perl 模块时的很大的一个问题。</p><p>下一点是当 perl 脚本发生错误时会退出整个工作进程，这显然也是不可接受的。</p><h2 id="njs-的设计目标" tabindex="-1">NJS 的设计目标 <a class="header-anchor" href="#njs-的设计目标" aria-label="Permalink to &quot;NJS 的设计目标&quot;">​</a></h2><p><strong>现代化，快速的，针对 NGINX 运行时量身定制的高级脚本</strong></p><p>好，我们完成了 nginx 脚本化配置历史的部分，现在来继续第二部分，NJS 的目标是什么。</p><p>NJS 项目的最终目的是设计出一种现代化，快速的，针对 NGINX 运行时量身定制的高级脚本，那么为了达成最终目的，又分了以下几点。</p><ul><li><p>快速和轻量</p><ul><li>njs 不应该过度降低 nginx 的性能</li><li>内存/CPU 开销不应很大</li></ul></li><li><p>安全性/健壮性</p><ul><li>每个请求都应与其他请求隔离</li></ul></li><li><p>流行的脚本语言</p></li></ul><p>首先第一点，它应该是快速和轻量的，使用 njs 不能拖慢 nginx 本身的速度，所以它也不应该有很大的 CPU 和内存开销，只为了能够在单个工作进程中处理大量的请求，就像 nginx 本身一样。</p><p>第二点是关于安全性和健壮性，这个想法意味着每个请求都应该在它自己的与其他请求隔离的上下文中执行，做这件事至少有两个目的，第一个是关于安全性，为了让你的代码与其他人在不同位置编写的代码相隔离。第二点关于健壮性，如果你有一个独立的上下文，那么你可以毫无负担地处理给定连接的特殊情况而不会影响其他连接。</p><p>最后再次提到的一点是要用流行的脚本语言，因为当你想要解决一些特定问题的时候，人们不想把时间花在学习新语言上。以他们最终选择的 JS 来说，潜台词就是当你需要解决问题的时候，在你的项目团队里抓一个会 JS 的人，比抓一个会 C、会 Perl 或者会 Lua 的人要方便得多。</p><h3 id="为什么是-javascript" tabindex="-1">为什么是 JavaScript？ <a class="header-anchor" href="#为什么是-javascript" aria-label="Permalink to &quot;为什么是 JavaScript？&quot;">​</a></h3><p>那为什么会选择 JS 做为脚本语言呢，当然是因为 JS 是世界上最好的语言啦！这是开玩笑的说法哈，正经来说肯定是因为将 JS 用作 nginx 脚本是有很多优点的。</p><ul><li>现代通用语言 <ul><li>因此，人们可以快速地理解它</li></ul></li><li>类 C 语法 <ul><li>与 nginx 配置文件良好匹配</li></ul></li><li>事件驱动对于 JavaScript 来说是很自然的 <ul><li>与 nginx 运行时完美匹配</li></ul></li></ul><p>JS 的第一个大优点是 JS 是一种现代化的通用语言，如果不是这一点，很可能就不会用 JS 来扩展 nginx 了。</p><p>第二个优点是，JS 有类似 C 的语法，这对于许多开发人员和 DevOps 来说是非常熟悉的。另外，对于 JS 来说额外的一大优点是 JS 有花括号来标记块，所以它与 nginx 配置的编写方式是很匹配的，所以在未来 JS 也许可以直接注入到 nginx 配置文件中，这可能会成为一个很有用的特性。</p><p>最后一点要提到的是 JS 是为浏览器编写的，所以事件驱动对于 JS 来说是很自然的，它内置于 JS 中，因此该特性与 nginx 运行时完美匹配，因为 nginx 本身也是与事件循环、回调以及类似的东西相关的。</p><h3 id="为什么要自己实现解释器" tabindex="-1">为什么要自己实现解释器 <a class="header-anchor" href="#为什么要自己实现解释器" aria-label="Permalink to &quot;为什么要自己实现解释器&quot;">​</a></h3><p>既然选择了以最流行的 JS 作为基础，那 NJS 为什么不选择市面上已经成熟的 JS 引擎，而是选择自己实现了一套 JS 解释器呢？</p><ul><li>V8/SpiderMonkey 在 nginx 中使用的话太重了 <ul><li>复杂的引擎，对 nginx 来说有太多不必要的开销</li></ul></li><li>Duktape 对于 nginx 内部的任务来说不够快 <ul><li>具有不同的优先级，更重视内存占用和 ECMAScript 规范一致性，而不是性能</li></ul></li><li>自定义解释器可以针对 nginx 运行时进行定制</li></ul><p>第一个原因是是，因为现有的 JavaScript 引擎，像 V8 和 SpiderMokey 一样先进的 JS 引擎都太重了，而不能在 nginx 中使用它们。很明显他们是为不同的任务而设计的，他们被设计为在浏览器中执行，他们有各种各样的 JIT 引擎、垃圾收集器等等现代浏览器需要的所有东西，这类东西非常多，而在 nginx 上的服务器端配置中，并不需要这些额外的东西。</p><p>第二个代替方案是 Duktape，它是一个可以嵌入的 JS 的引擎，可以嵌入到 C 和 C++ 语言中，他非常成熟，具有很多功能。但 Duktape 的问题在于它具有不同的优先级，更重视内存占用和 ECMAScript 规范一致性以及所有在它的优先级中比性能更重要的东西。这个对 nginx 来说不是一件好事，因为对于 nginx 我们更想要的是速度。</p><p>最后一种方案就是自己实现解释器，这样就可以根据执行环境对其进行定制，这是一件非常有用的事情，因为当你拥有自己的解释器时，你可以对其进行自定义。至于自定义可以做什么，以下面这张图为例子。</p><p><strong>每秒创建上下文次数</strong></p><p><img src="'+l+'" alt="每秒创建上下文次数"></p><p>这是每秒创建上下文的数量对比，截图来自 2018 年 nginx 团队的分享，当时是 0.2 版本，现在已经到 0.7 版本了。可以看到 NJS 创建上下文的速度至少比其他引擎快了两个个数量级。</p><p>原因很简单，就是 NJS 被设计为针对上下文创建时间进行了优化。对于 V8 和 SpiderMonkey 这样的浏览器引擎来说，因为要处理 JS 代码例如运行 JIT 编译器而引入一些延迟是完全可以接受的，但对于运行在服务器端的 NJS 来说情况完全不同，对于一个给定的请求路径，他所要运行的代码是相同的，因此可以预编译代码，可以剥离任何不需要的功能，可以优化上下文创建时间，这就是为什么我们看到这样的数字。</p><h2 id="njs-解释器" tabindex="-1">NJS 解释器 <a class="header-anchor" href="#njs-解释器" aria-label="Permalink to &quot;NJS 解释器&quot;">​</a></h2><p>那么接下来就将展示 NJS 如何实现前面描述的目标。</p><h3 id="为什么-njs-这么快" tabindex="-1">为什么 NJS 这么快 <a class="header-anchor" href="#为什么-njs-这么快" aria-label="Permalink to &quot;为什么 NJS 这么快&quot;">​</a></h3><p><strong>NGINX modules</strong></p><ul><li>在启动时进行字节码编译</li><li>为每个请求克隆一份已编译的虚拟机 <ul><li>快速创建和销毁虚拟机</li></ul></li><li>没有 JIT 编译</li></ul><p>第一点是在 nginx 开始运行时，NJS 代码就会被编译成字节码，而不是像浏览器引擎一样一边解释一边执行，因此速度上有很大提升。</p><p>我想提一下复制和写入的含义是正确的。他以为这曾经是一个孩子和最近的实例，更改了全局对象。该更改仅对特定请求可见，因此这意味着我们共享大量不可变代码的很大一部分。减少 CPU 和内存开销。</p><p>最后我想提的一点是我们 jit 两个原因，第 1 个原因是关于可以置信。飘逸变异。如果你可以编译代码，那么你可以运行它，而对于 GT 变异情况并非如此。那个原因是 Git 引擎在 NG x 环境中并没有给你带来很多性能优势。因为大多数你是在 n 这个词本身内部没有大量计算而不是受到 x 本身的限制，而是引擎和 NG 是本身受到通常你的限制。我调用几个本身的外部 IP，你会受到他的限制。</p><p><strong>解释器</strong></p><ul><li>基于寄存器的虚拟机 <ul><li>内存占用小</li></ul></li><li>使用 UTF-8 编码的字符串 <ul><li>ECMAScript 规范要求 UTF-16</li></ul></li><li>不进行垃圾回收 <ul><li>而是立即销毁克隆的虚拟机</li></ul></li></ul><p>是关于 NG x 解释器的实现方式。这是基于寄存器的虚拟机机器，并根据基于堆栈的虚拟机的比较，我们在那里注册基于虚拟机的内存占用量较小。典型的。那是小势力，你在那里大约有几千自己的内存。第 2 点是根据以下买一条本规范。应该使用 tf16 编码处理字符串，但显然这不是。你想挤出性能，这不是一个好主意，因为您必须为任何过失数据块分配至少两倍以上的资金。因此按键是使用由 tf8 字符串。能够显著减少 CPU 中的内存。提到的一点是关于垃圾收集的操作开销，因为你们中大多数人都知道现代语言，高级语言，例如 Java JavaScript，他们采用某种形式的垃圾收集算法。必须处理的特殊过程，手机不再使用的数据，但该进程本身引用技术的进程和垃圾收集器的进程停止，它们引入可测量的开销和测量的延迟而不是 NG4 岁适合本身的不同策略。</p><p>大多数 NG 模块都是编写的。 NDS 从内存池中分配内存，该内存此时链接到当前请求。数据请求完成，NG.克隆的虚拟机会被整体销毁。为该 NG 实例的操作非常便宜。显然他对于短期请求非常有效。会为长期存在的请求引入过多的内存消耗。而我们计划引入可选的垃圾手机引擎。来应对此类任务。</p><h3 id="njs-不打算做的事" tabindex="-1">NJS 不打算做的事 <a class="header-anchor" href="#njs-不打算做的事" aria-label="Permalink to &quot;NJS 不打算做的事&quot;">​</a></h3><ul><li>nginx + NJS 不是应用程序服务器 <ul><li>不是“Node.js”的替代品</li></ul></li><li>严格的 ECMAScript 规范一致性 <ul><li>大量的工作要做，优先级不高</li></ul></li></ul><p>那最后我想再次重申，我们是尝试做什么和我们不想做的事情。所以第 1 点是 NG s 和 n 级 s 不是。用程序服务器。所以我们不会替换 note gs。例如 note gs 就很好，这绝对是我们想要的。要做的事。在 NG x 本身内部添加额外的脚本功能。我要扩展，这个是引擎配置，将它们设置为两个以使用使它们更灵活而不是。替换 note gs。</p><p>只关于以三维脚本规范的一致性。它是关于现代和高级代理的编写方式，因此他们确认我们是。定的。我脚本规范。对我们来说优先级比较低，因为这是一项巨大的工作要做而且该规范的一些怪癖，不允许我们进行一些额外的优化。这就是为什么最终我们准备好看的。</p><h3 id="目前可用的功能" tabindex="-1">目前可用的功能 <a class="header-anchor" href="#目前可用的功能" aria-label="Permalink to &quot;目前可用的功能&quot;">​</a></h3><p><a href="https://nginx.org/en/docs/njs/compatibility.html" target="_blank" rel="noreferrer">https://nginx.org/en/docs/njs/compatibility.html</a></p><p><a href="https://nginx.org/en/docs/njs/reference.html" target="_blank" rel="noreferrer">https://nginx.org/en/docs/njs/reference.html</a></p><ul><li>Boolean, Number, String, Object, Array, Function, Regexp, JSON, Math, Promise</li><li>exceptions 异常</li><li>闭包和箭头函数</li><li>let (0.6.0), const (0.6.0), async (0.7.0), await (0.7.0)</li><li>内置模块：fs, querystring, Crypto</li></ul><p>要提到的第 1 件事是 JavaScript 中所有的原生对象都符合 ECMAScript 5.1 规范，例如 Boolean, Number, String, Object, Array 等等</p><p>第二点是关于异常的，你可以以通常的方式抛出和捕获他们。</p><p>你可以使用闭包和箭头函数，这些当然都是支持的，还有最近两个版本刚支持的一些 ES6 语法，例如 let/const、async/await</p><p>另外，你还可以使用 NJS 内置的一些模块，比如 fs 文件系统模块、querystring 参数解析模块和加密模块，他们就和在 node.js 中使用是一样的。</p><p>当然，还有一些是目前 NJS 中不支持的</p><p>下面是关于什么在 NJS 中不可用</p><ul><li>eval()</li><li>将 NJS 直接嵌入到 nginx 配置文件中</li><li>兼容性文档中未提到的 API</li></ul><p>例如 eval() 操作不可用，因为性能和安全性的原因，nginx 团队并不打算实现它。</p><p>以及将 NJS 直接嵌入到 nginx 配置文件中这个功能仍在计划中还未实现。</p><p>另外，在官方兼容性文档中没有提到的 API 均还未受到支持，例如截止到 NJS 0.7.8 版本，循环语句中还有 for of 没有得到实现，其他像 for 循环、for in、while、do while 都是文档里提到有的。其实如果时间再往前推两年，像 let/const、async/await 也在待实现的队伍中，而现在大部分你熟悉的 API 都已经实现了，所以这点不用太担心。</p><h2 id="在-nginx-中使用-njs" tabindex="-1">在 NGINX 中使用 NJS <a class="header-anchor" href="#在-nginx-中使用-njs" aria-label="Permalink to &quot;在 NGINX 中使用 NJS&quot;">​</a></h2><h3 id="安装并启用-njs" tabindex="-1">安装并启用 NJS <a class="header-anchor" href="#安装并启用-njs" aria-label="Permalink to &quot;安装并启用 NJS&quot;">​</a></h3><ol><li>安装预构建包。 <ul><li>Ubuntu 和 Debian 系统：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-module-njs</span></span></code></pre></div></li><li>RedHat、CentOS 和 Oracle Linux 系统：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-module-njs</span></span></code></pre></div></li></ul></li><li>在 nginx.conf 配置文件的顶层（“main”）上下文（而非 http 或 stream 上下文）中添加一个 load_module 指令，以启用该模块。本例启用了 NJS 的 http 模块，另外还有 stream 模块用来控制 TCP/UDP 协议的流量。<div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">load_module </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">modules/ngx_http_js_module.so;</span></span></code></pre></div></li><li>重新加载 NGINX，以便将 NGINX JavaScript 模块加载到运行实例中。<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reload</span></span></code></pre></div></li></ol><p>终于我们要开始看 NJS 如何使用了，首先我们必须安装它，以安装 njs 预编译模块为例，需要 nginx 版本是 1.9.11 或更高版本，你要做的事很简单，就是使用 apt-get 安装 njs 模块，然后在 nginx.conf 配置文件的顶层（“main”）上下文（而非 http 或 stream 上下文）中使用 load_module 指令引入 njs 模块，引入之后我们就可以在其余配置中使用 njs 指令了。本例启用了 NJS 的 http 模块，另外还有 stream 模块用来控制 TCP/UDP 协议的流量。最后重新加载 NGINX，以便将 NGINX JavaScript 模块加载到运行实例中。</p><p>如果你只是想简单查看 NJS 的运行情况，那么也可以使用 docker 容器配合下面链接中的例子来查看。</p><p><a href="https://github.com/nginx/njs-examples" target="_blank" rel="noreferrer">https://github.com/nginx/njs-examples</a></p><p><a href="https://github.com/f5devcentral/nginx-njs-usecases" target="_blank" rel="noreferrer">https://github.com/f5devcentral/nginx-njs-usecases</a></p><p>这些示例中包含工作中可能需要的各个方面的功能，例如：</p><ul><li>授权 <ul><li>生成 JWT 令牌</li><li>根据请求正文内容授权请求</li></ul></li><li>代理 <ul><li>将多个子请求的结果异步合并到单个回复中</li><li>链式访问多个子请求</li></ul></li><li>修改响应 <ul><li>修改或删除上游服务器发送的 Cookie</li><li>将响应正文字符转换为小写</li></ul></li><li>记录 <ul><li>使用 json 格式记录日志</li><li>记录每个客户端的请求数</li></ul></li></ul><p>等等。</p><h3 id="hello-world" tabindex="-1">Hello World <a class="header-anchor" href="#hello-world" aria-label="Permalink to &quot;Hello World&quot;">​</a></h3><p><img src="'+p+`" alt="Hello World"></p><ol><li>启用 njs 模块</li><li>使用 js_import 引用 http.js 文件</li><li>使用 js_content 引用 http.js 文件中导出的 hello 方法</li><li>定义并导出 hello 方法</li></ol><p><a href="https://nginx.org/en/docs/njs/reference.html#http" target="_blank" rel="noreferrer">https://nginx.org/en/docs/njs/reference.html#http</a></p><p>在看上一页那些复杂的例子之前，按照编程界的惯例，我们先来实现一个最简单的示例 hello world。</p><p>你要做的第 1 件事就是在 nginx.conf 文件中用 load_module 加载 njs 模块</p><p>然后我们使用了第一个 NJS 指令 js_import，它的作用很简单，就是引入你编写的 js 文件，在这里就是引入了 http.js 文件；再使用第二个 NJS 指令 js_content，它的作用也很简单，就是将这个特定位置的内容处理程序更改为 NJS 脚本，在这里就是指从 http.js 文件中导出的 hello 方法。</p><p>最后再来看一看 http.js 文件，我们在这里编写名为 hello 的标准 JS 函数，其参数通常被命名为 r，代表 nginx 当前正在服务的请求。从官方文档中可以查看 r 有许多成员变量和方法可以用来操作请求。这里我们使用 return 方法，它和 nginx 本身的 return 非常相似，向用户返回 200 的状态码和文本 hello world。</p><p>现在示例已经完成了，只剩下最后一步，启动 nginx 并 curl <a href="http://localhost" target="_blank" rel="noreferrer">http://localhost</a>，这样就可以看到刚刚 hello 方法所返回的 Hello World 了。</p><h3 id="njs-异步方法" tabindex="-1">NJS 异步方法 <a class="header-anchor" href="#njs-异步方法" aria-label="Permalink to &quot;NJS 异步方法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始化连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ngx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://nginx.org/en/docs/njs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 当url返回时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reply.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 当正文读取完成时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 如果出现了问题，就执行这里</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">501</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e.message))</span></span></code></pre></div><h3 id="子请求功能" tabindex="-1">子请求功能 <a class="header-anchor" href="#子请求功能" aria-label="Permalink to &quot;子请求功能&quot;">​</a></h3><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">js_import </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> from http/join_subrequests.js;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /join </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    js_content </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main.join;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /foo </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://backend1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /bar </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://backend2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// example.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  join_subrequests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> join_subrequests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">subs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(subs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subrequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uri)))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> results.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uri: reply.uri,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    code: reply.status,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    body: reply.responseBody,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { join }</span></span></code></pre></div><p>第二个示例将向您展示 NJS HTTP 模块的子请求方法聚合并发接口的功能。在此示例中，我们将向该示例后端中的至少两个接口发出多个同步子请求。并且我们将收集他们的返回，将联合结果同步返回给客户端。</p><p>从配置文件中我们可以看到，我们使用了 js_import 指令将 js 文件导入，并使用了别名的功能将导入的模块命名为 main，我们可以在其余配置用别名来引用它。然后使用 js_content 指令将 main 对象中的 join 方法作为 join 接口的处理函数。</p><p>然后来看看 js 文件中的内容，我们在 join 方法中使用了一个发起子请求的辅助函数，该辅助函数需要一个请求对象和子请求列表。</p><p>在辅助函数内部通过 Promise.all 和 r 对象上的 subrequest 子请求方法并行执行多个子请求调用，在所有子请求完成后拼装所有返回内容，并将其序列化后返回给 join 请求。</p><h3 id="真实案例-使用-json-格式记录日志" tabindex="-1">真实案例 - 使用 json 格式记录日志 <a class="header-anchor" href="#真实案例-使用-json-格式记录日志" aria-label="Permalink to &quot;真实案例 - 使用 json 格式记录日志&quot;">​</a></h3><p>默认情况下 Nginx 打印出的日志是包含各种字段值的字符串，就像下面这样：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>172.23.0.1 - - [27/Oct/2022:12:24:45 +0000] &quot;GET / HTTP/1.1&quot; 200 10 &quot;-&quot; &quot;curl/7.79.1&quot; &quot;-&quot;</span></span></code></pre></div><p>这样的格式存在一些缺点：</p><ul><li>它本身是一种自定义格式 - 如果你想要读取它，需要编写特定的日志解析器</li><li>条目可能很长，让人难以阅读</li><li>无法记录存在不确定性的值，例如“所有请求头”</li></ul><p>我们可以通过使用 NGINX JavaScript 模块（njs）以结构化格式（如 JSON）编写日志条目来解决这些问题。</p><p>此示例的 NGINX 配置非常简单。</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># nginx.conf</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    js_import </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scripts/logging.js;                 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从这里加载 js 代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    js_set </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     $access_log logging.loggingJson;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用 js 方法为变量赋值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    log_format </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json $access_log;                   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义特殊的日志格式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        access_log </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/var/log/nginx/access_json.log json;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello NJS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>可以见到，NGINX JavaScript 代码并不内嵌在配置语法内。相反，我们使用 <a href="https://nginx.org/en/docs/http/ngx_http_js_module.html#js_import" target="_blank" rel="noreferrer">js_import</a> 指令来导入包含了所有 JavaScript 代码的文件。<a href="https://nginx.org/en/docs/http/ngx_http_js_module.html#js_set" target="_blank" rel="noreferrer">js_set</a> 指令定义了一个新的 NGINX 变量 <code>$access_log</code>，后面是为变量赋值的 JavaScript 函数。<a href="https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format" target="_blank" rel="noreferrer">log_format</a> 指令定义了一种名为 json 的新格式，它能够将 <code>$access_log</code> 的值写入每个日志行。</p><p><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#server" target="_blank" rel="noreferrer">server</a> 块定义了一个简单的 HTTP 服务器，监听 80 端口。 <a href="https://nginx.org/en/docs/http/ngx_http_log_module.html#access_log" target="_blank" rel="noreferrer">access_log</a> 指令指定了日志文件路径以及所有请求均采用 json 格式进行记录。</p><p>现在，来看看日志处理的 JavaScript 代码。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loggingJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> indexes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;remote_addr&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;remote_user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;time_local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;request&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;status&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;body_bytes_sent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;http_referer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;http_user_agent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> indexes) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> indexes[n]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    log[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.variables[key]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headerTypes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;headersIn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;headersOut&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headerTypes) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headerTypes[m]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    log[type] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r[type]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headers) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      log[type][n] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headers[n]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(log)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (logStr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&quot;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logStr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&quot;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logStr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { loggingJson }</span></span></code></pre></div><p>NGINX 变量只有在被需要的时候才会进行求值计算，这意味着 js_set 定义的 JavaScript 函数只在需要该变量的值时才执行。在此示例中，由于 $access_log 被用于 <a href="https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format" target="_blank" rel="noreferrer">log_format</a> 指令，因此 json() 在日志记录时执行。</p><p>以下是本示例的真实日志:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/log/nginx/access_json.log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;remote_addr&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;172.27.0.1&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;time_local&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;28/Oct/2022:03:31:20 +0000&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;request&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;GET / HTTP/1.1&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;status&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;200&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;body_bytes_sent&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;10&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;http_user_agent&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;curl/7.79.1&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;headersIn&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Host</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;:&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localhost:8095</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;,&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User-Agent</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;:&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl/7.79.1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;,&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Accept</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;:&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">*/*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;},&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">headersOut</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;:{&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Content-Type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;:&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text/plain</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;,&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Content-Length</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;:&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">10</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;}}</span></span></code></pre></div><p>其实如果是正常的日志没必要做这么详细的记录，我们还可以实现仅在遇到错误时再生成这样的数据，记录到单独的日志文件中，方便我们进行故障排除。不过那就需要更多额外的 nginx 配置，这里就不展开了。</p><h2 id="准备好使用-njs-了吗" tabindex="-1">准备好使用 NJS 了吗？ <a class="header-anchor" href="#准备好使用-njs-了吗" aria-label="Permalink to &quot;准备好使用 NJS 了吗？&quot;">​</a></h2><p><strong>nginx 和 NJS 可能已经在这里了</strong></p><p>NJS 已经包含在 nginx 官方 docker 镜像中了，并且作为动态模块可以很容易地安装到其他上下文中。</p><ul><li>nginx 可能已经存在于许多的基础设施中</li><li>大多数团队都会有一些具备 JavaScript 知识的人</li><li>在适当的情况下维护简单的逻辑</li><li>NJS 与 nginx 深度融合</li></ul><p>如果你的团队使用的是 nginx 官方的 docker 镜像，那么 NJS 已经包含在其中了，如果没有使用镜像，那么 NJS 作为动态模块也是非常容易安装的。</p><p>nginx 作为最流行的 web 服务器可能已经存在于你的基础设施中，而大多数团队都会有一些具备 JavaScript 知识的人，这意味着进一步降低了使用 NJS 的门槛，尤其是当你需要在适当的情况下维护一些简单的逻辑时。</p><p><strong>NJS 可让您灵活地进行输入和输出</strong></p><p>我们使用简单的模式展示了这些示例程序，但相同的模式可以应用于实际问题</p><p><strong>Node.js 生态系统可用（如果你关心这一点的话）</strong></p><p>尽管许多包需要转译才能与 NJS 兼容，转译的性能和维护问题的确存在，但你确实可以使用 npm 包了，它真实地提供了一个大型生态系统。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>在 njs 之前，Nginx+Lua 生态虽然已经十分成熟，但 Nginx 毕竟是一个 Web 服务器，JavaScript 作为 Web 开发的最流行的语言，用 JavaScript 生态来扩展 Nginx 的功能，可能会做出更多具有想象力的事情。</p><h2 id="相关链接" tabindex="-1">相关链接 <a class="header-anchor" href="#相关链接" aria-label="Permalink to &quot;相关链接&quot;">​</a></h2><p>NJS 文档：</p><p><a href="http://nginx.org/en/docs/njs/" target="_blank" rel="noreferrer">http://nginx.org/en/docs/njs/</a></p><p>应用示例：</p><p><a href="https://github.com/nginx/njs-examples" target="_blank" rel="noreferrer">https://github.com/nginx/njs-examples</a></p><p><a href="https://github.com/f5devcentral/nginx-njs-usecases" target="_blank" rel="noreferrer">https://github.com/f5devcentral/nginx-njs-usecases</a></p><p>博客：</p><p><a href="https://nginx.com/blog/tag/javascript" target="_blank" rel="noreferrer">https://nginx.com/blog/tag/javascript</a></p><p>源代码：</p><p><a href="https://github.com/nginx/njs" target="_blank" rel="noreferrer">https://github.com/nginx/njs</a></p>`,145),e=[h];function k(r,g,d,E,o,c){return a(),i("div",null,e)}const u=s(t,[["render",k]]);export{F as __pageData,u as default};
