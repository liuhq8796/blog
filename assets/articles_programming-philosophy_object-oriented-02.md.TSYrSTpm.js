import{_ as e,o as t,c as a,R as r}from"./chunks/framework.DVlxwgAE.js";const m=JSON.parse('{"title":"面向对象——02.面向对象编程中的面向过程","description":"","frontmatter":{},"headers":[],"relativePath":"articles/programming-philosophy/object-oriented-02.md","filePath":"articles/programming-philosophy/object-oriented-02.md","lastUpdated":1703129368000}'),o={name:"articles/programming-philosophy/object-oriented-02.md"},i=r('<h1 id="面向对象——02-面向对象编程中的面向过程" tabindex="-1">面向对象——02.面向对象编程中的面向过程 <a class="header-anchor" href="#面向对象——02-面向对象编程中的面向过程" aria-label="Permalink to &quot;面向对象——02.面向对象编程中的面向过程&quot;">​</a></h1><h2 id="什么是面向过程编程-什么是面向过程编程语言" tabindex="-1">什么是面向过程编程？什么是面向过程编程语言？ <a class="header-anchor" href="#什么是面向过程编程-什么是面向过程编程语言" aria-label="Permalink to &quot;什么是面向过程编程？什么是面向过程编程语言？&quot;">​</a></h2><p>实际上，面向过程编程和面向过程编程语言并没有严格的官方定义。理解这两个概念最好的方式是跟面向对象编程和面向对象编程语言进行对比。相较于面向对象编程以类为组织代码的基本单元，面向过程编程则是以过程（或方法）作为组织代码的基本单元。它最主要的特点就是数据和方法相分离。相较于面向对象编程语言，面向过程编程语言最大的特点就是不支持丰富的面向对象编程特性，比如继承、多态、封装。</p><h2 id="面向对象编程相比面向过程编程有哪些优势" tabindex="-1">面向对象编程相比面向过程编程有哪些优势？ <a class="header-anchor" href="#面向对象编程相比面向过程编程有哪些优势" aria-label="Permalink to &quot;面向对象编程相比面向过程编程有哪些优势？&quot;">​</a></h2><p>面向对象编程相比起面向过程编程的优势主要有三个。</p><ul><li>对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。面向对象编程比起面向过程编程，更能应对这种复杂类型的程序开发。</li><li>面向对象编程相比面向过程编程，具有更加丰富的特性（封装、抽象、继承、多态）。利用这些特性编写出来的代码，更加易扩展、易复用、易维护。</li><li>从编程语言跟机器打交道的方式的演进规律中，我们可以总结出：面向对象编程语言比起面向过程编程语言，更加人性化、更加高级、更加智能。</li></ul><h2 id="常见的三种违反面向对象编程风格的典型代码设计" tabindex="-1">常见的三种违反面向对象编程风格的典型代码设计 <a class="header-anchor" href="#常见的三种违反面向对象编程风格的典型代码设计" aria-label="Permalink to &quot;常见的三种违反面向对象编程风格的典型代码设计&quot;">​</a></h2><h3 id="滥用-getter、setter-方法" tabindex="-1">滥用 getter、setter 方法 <a class="header-anchor" href="#滥用-getter、setter-方法" aria-label="Permalink to &quot;滥用 getter、setter 方法&quot;">​</a></h3><p>在设计实现类的时候，除非真的需要，否则尽量不要给属性定义 setter 方法。除此之外，尽管 getter 方法相对 setter 方法要安全些，但是如果返回的是集合容器，那也要防范集合内部数据被修改的风险。</p><h3 id="constants-类、utils-类的设计问题" tabindex="-1">Constants 类、Utils 类的设计问题 <a class="header-anchor" href="#constants-类、utils-类的设计问题" aria-label="Permalink to &quot;Constants 类、Utils 类的设计问题&quot;">​</a></h3><p>对于这两种类的设计，我们尽量能做到职责单一，定义一些细化的小类，比如 RedisConstants、FileUtils，而不是定义一个大而全的 Constants 类、Utils 类。除此之外，如果能将这些类中的属性和方法，划分归并到其他业务类中，那是最好不过的了，能极大地提高类的内聚性和代码的可复用性。</p><h3 id="基于贫血模型的开发模式" tabindex="-1">基于贫血模型的开发模式 <a class="header-anchor" href="#基于贫血模型的开发模式" aria-label="Permalink to &quot;基于贫血模型的开发模式&quot;">​</a></h3><p>传统的 MVC 结构分为 Model 层、Controller 层、View 层这三层。不过，在做前后端分离之后，三层结构在后端开发中，会稍微有些调整，被分为 Controller 层、Service 层、Repository 层。Controller 层负责暴露接口给前端调用，Service 层负责核心业务逻辑，Repository 层负责数据读写。而在每一层中，我们又会定义相应的 VO（View Object）、BO（Business Object）、Entity。一般情况下，VO、BO、Entity 中只会定义数据，不会定义方法，所有操作这些数据的业务逻辑都定义在对应的 Controller 类、Service 类、Repository 类中。这就是典型的面向过程的编程风格。</p><h2 id="在面向对象编程中-为什么容易写出面向过程风格的代码" tabindex="-1">在面向对象编程中，为什么容易写出面向过程风格的代码？ <a class="header-anchor" href="#在面向对象编程中-为什么容易写出面向过程风格的代码" aria-label="Permalink to &quot;在面向对象编程中，为什么容易写出面向过程风格的代码？&quot;">​</a></h2><p>你可以联想一下，在生活中，你去完成一个任务，你一般都会思考，应该先做什么、后做什么，如何一步一步地顺序执行一系列操作，最后完成整个任务。面向过程编程风格恰恰符合人的这种流程化思维方式。而面向对象编程风格正好相反。它是一种自底向上的思考方式。它不是先去按照执行流程来分解任务，而是将任务翻译成一个一个的小的模块（也就是类），设计类之间的交互，最后按照流程将类组装起来，完成整个任务。我们在上一节课讲到了，这样的思考路径比较适合复杂程序的开发，但并不是特别符合人类的思考习惯。</p><p>除此之外，面向对象编程要比面向过程编程难一些。在面向对象编程中，类的设计还是挺需要技巧，挺需要一定设计经验的。你要去思考如何封装合适的数据和方法到一个类里，如何设计类之间的关系，如何设计类之间的交互等等诸多设计问题。</p><p>所以，基于这两点原因，很多工程师在开发的过程，更倾向于用不太需要动脑子的方式去实现需求，也就不由自主地就将代码写成面向过程风格的了。</p><h2 id="面向过程编程及面向过程编程语言就真的无用武之地了吗" tabindex="-1">面向过程编程及面向过程编程语言就真的无用武之地了吗？ <a class="header-anchor" href="#面向过程编程及面向过程编程语言就真的无用武之地了吗" aria-label="Permalink to &quot;面向过程编程及面向过程编程语言就真的无用武之地了吗？&quot;">​</a></h2><p>实际上，面向过程编程是面向对象编程的基础，面向对象编程离不开基础的面向过程编程。为什么这么说？我们仔细想想，类中每个方法的实现逻辑，不就是面向过程风格的代码吗？</p><p>除此之外，面向对象和面向过程两种编程风格，也并不是非黑即白、完全对立的。在用面向对象编程语言开发的软件中，面向过程风格的代码并不少见，甚至在一些标准的开发库（比如 JDK、Apache Commons、Google Guava）中，也有很多面向过程风格的代码。</p><p>不管使用面向过程还是面向对象哪种风格来写代码，我们最终的目的还是写出易维护、易读、易复用、易扩展的高质量代码。只要我们能避免面向过程编程风格的一些弊端，控制好它的副作用，在掌控范围内为我们所用，我们就大可不用避讳在面向对象编程中写面向过程风格的代码。</p>',21),s=[i];function l(n,h,c,d,p,u){return t(),a("div",null,s)}const b=e(o,[["render",l]]);export{m as __pageData,b as default};
