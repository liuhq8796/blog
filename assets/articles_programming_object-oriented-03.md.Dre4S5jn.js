import{_ as e,c as t,ag as r,o}from"./chunks/framework.BO7c5oGC.js";const _=JSON.parse('{"title":"面向对象——03.抽象类 vs 接口","description":"","frontmatter":{},"headers":[],"relativePath":"articles/programming/object-oriented-03.md","filePath":"articles/programming/object-oriented-03.md","lastUpdated":1745252514000}'),i={name:"articles/programming/object-oriented-03.md"};function s(n,a,d,l,c,h){return o(),t("div",null,a[0]||(a[0]=[r('<h1 id="面向对象——03-抽象类-vs-接口" tabindex="-1">面向对象——03.抽象类 vs 接口 <a class="header-anchor" href="#面向对象——03-抽象类-vs-接口" aria-label="Permalink to &quot;面向对象——03.抽象类 vs 接口&quot;">​</a></h1><h2 id="抽象类和接口的语法特性" tabindex="-1">抽象类和接口的语法特性 <a class="header-anchor" href="#抽象类和接口的语法特性" aria-label="Permalink to &quot;抽象类和接口的语法特性&quot;">​</a></h2><p>抽象类不允许被实例化，只能被继承。它可以包含属性和方法。方法既可以包含代码实现，也可以不包含代码实现。不包含代码实现的方法叫作抽象方法。子类继承抽象类，必须实现抽象类中的所有抽象方法。接口不能包含属性，只能声明方法，方法不能包含代码实现。类实现接口的时候，必须实现接口中声明的所有方法。</p><h2 id="抽象类和接口存在的意义" tabindex="-1">抽象类和接口存在的意义 <a class="header-anchor" href="#抽象类和接口存在的意义" aria-label="Permalink to &quot;抽象类和接口存在的意义&quot;">​</a></h2><p>抽象类是对成员变量和方法的抽象，是一种 is-a 关系，是为了解决代码复用问题。接口仅仅是对方法的抽象，是一种 has-a 关系，表示具有某一组行为特性，是为了解决解耦问题，隔离接口和具体的实现，提高代码的扩展性。</p><h2 id="抽象类和接口的应用场景区别" tabindex="-1">抽象类和接口的应用场景区别 <a class="header-anchor" href="#抽象类和接口的应用场景区别" aria-label="Permalink to &quot;抽象类和接口的应用场景区别&quot;">​</a></h2><p>什么时候该用抽象类？什么时候该用接口？实际上，判断的标准很简单。如果要表示一种 is-a 的关系，并且是为了解决代码复用问题，我们就用抽象类；如果要表示一种 has-a 关系，并且是为了解决抽象而非代码复用问题，那我们就用接口。</p>',7)]))}const m=e(i,[["render",s]]);export{_ as __pageData,m as default};
