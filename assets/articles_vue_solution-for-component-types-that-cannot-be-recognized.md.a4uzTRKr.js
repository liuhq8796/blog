import{_ as s,o as e,c as t,R as a}from"./chunks/framework.DVlxwgAE.js";const g=JSON.parse('{"title":"无法识别组件类型的解决方案","description":"","frontmatter":{},"headers":[],"relativePath":"articles/vue/solution-for-component-types-that-cannot-be-recognized.md","filePath":"articles/vue/solution-for-component-types-that-cannot-be-recognized.md","lastUpdated":1703141430000}'),n={name:"articles/vue/solution-for-component-types-that-cannot-be-recognized.md"},i=a(`<h1 id="无法识别组件类型的解决方案" tabindex="-1">无法识别组件类型的解决方案 <a class="header-anchor" href="#无法识别组件类型的解决方案" aria-label="Permalink to &quot;无法识别组件类型的解决方案&quot;">​</a></h1><h2 id="问题描述" tabindex="-1">问题描述 <a class="header-anchor" href="#问题描述" aria-label="Permalink to &quot;问题描述&quot;">​</a></h2><p>截止此文章撰写时，当使用 TS + unplugin-vue-components 插件以及 pnpm 包管理器时，会出现 TS 无法识别自动引入组件的类型的问题，相关的 issue 有：<a href="https://github.com/antfu/unplugin-vue-components/issues/608" target="_blank" rel="noreferrer">components.d.ts it looks does not work</a>。</p><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><p>首先要确认的是项目中的 <code>tsconfig.json</code> 配置文件中的 <code>include</code> 中是否包含 <code>components.d.ts</code> 文件，如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;include&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;components.d.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果你只是忘了这一步，那么恭喜你，问题解决了。</p><p>如果你已经配置过了该文件但仍没有解决问题，那么请继续往下看。</p><p>根据 issue 中的讨论，我们可以推断出这个问题是由于使用了幻影依赖导致的，也就是那些被提升到模块目录的根目录的依赖。而 pnpm 的初衷之一就是创建非扁平的 <code>node_modules</code>，它的机制会使项目无法使用幻影依赖。</p><p>因此，我们可以通过在项目根目录下创建 <code>.npmrc</code> 文件并添加如下内容来提升部分依赖以使项目可以使用这些幻影依赖：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># component.d.ts it looks does not work</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># https://github.com/antfu/unplugin-vue-components/issues/608</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">public-hoist-pattern[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;@vue/runtime-core&quot;</span></span></code></pre></div><p>添加后记得重新执行 <code>pnpm install</code> 来使配置生效。</p>`,12),o=[i];function p(l,c,h,d,r,u){return e(),t("div",null,o)}const m=s(n,[["render",p]]);export{g as __pageData,m as default};
